-- ===================================================================================
-- ====================== Mario Ventura Burgos - 43223476J ===========================
-- ================= Sistemas de gestión de base de datos ============================
-- ============== Código usado para la realización del proyecto final ================
-- ===================================================================================
-- CONFIGURACIÓN DEL GESTOR
-- Clonación del repositorio
git clone https://github.com/oracle/docker-images.git
-- Construcción de la imagen
sudo ./buildContainerImage.sh -v 19.3.0 -s
-- Comprobar que la imagen se ha obtenido
sudo docker images
-- Representación en Megabytes 
free -m | awk '/^Memoria:/ {mem_total=$2} /^Swap:/ {swap_total=$2} END {print "Memoria Virtual Total en MB: " mem_total+swap_total}'
-- Ejecutar el contenedor docker
sudo docker run -d -name oracleDatabaseC \
  -p 1521:1521 -p 5500:5500 \
  -e ORACLE_SID=FET \
  -e ORACLE_PDB=FETPDB1 \
  -e INIT_SGA_SIZE=7872  \
  -e INIT_PGA_SIZE=2362  \
  -e ENABLE_ARCHIVING=true \
  oracle/database:19.3.0-se2
-- Ver dockers en ejecución
sudo docker ps

-- ===================================================================================
-- Creación del usuario
sudo docker exec -it oracleDatabaseC bash
-- Conexión con SYS
sqlplus / as sysdba
-- Cambiar sesión
ALTER SESSION SET CONTAINER=FETPDB1;
-- Creación Usuario
CREATE USER Utest IDENTIFIED BY utest_user_passwd;
-- Permisos a nivel de BD
GRANT CREATE SESSION TO Utest;      -- Crear sesión
GRANT CONNECT TO Utest;             -- Conexión
GRANT CREATE TABLE TO Utest;        -- Crear tablas

-- Permisos a nivel de tabla: INSERT Y SELECT
-- ES NECESARIO HACER LAS TABLAS PARA PODER OTORGAR LOS PERMISOS
-- ===================================================================================
-- CREACIÓN DE TABLAS
-- TABLA UBICACION
CREATE TABLE UBICACION (
    ideubi NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- Identificador de ubicación
    nompai VARCHAR2(40) NOT NULL, -- Nombre del país
    nomciu VARCHAR2(50) NOT NULL, -- Nombre de la ciutat
    CONSTRAINT PK_UBICACION PRIMARY KEY (ideubi)
);

-- TABLA RAMADERIA
CREATE TABLE RAMADERIA (
    cifram CHAR(3),                 -- CIF de la ramadería
    nomram VARCHAR2(50) NOT NULL,   -- Nombre de la ramadería
    CONSTRAINT PK_RAMADERIA PRIMARY KEY (cifram)
);

-- TABLA FERIA
CREATE TABLE FERIA (
    fircor VARCHAR2(50),    -- Nombre de la festa o feria
    CONSTRAINT PK_FERIA PRIMARY KEY (fircor)
);
-- TABLA PLAZA
CREATE TABLE PLAZA (
    nompla VARCHAR2(50),    -- Nombre de la plaza
    ideubi NUMBER NOT NULL, -- Identificador de ubicación
    anypla DATE NOT NULL,   -- Año de construcción de la plaza
    locpla NUMBER NOT NULL, -- Número de asientos de la plaza
    tippla NUMBER(1) CHECK (TIPPLA IN (0, 1)), -- Tipo de plaza, actua como bool
    estpla CLOB,             -- Estilos de construcción de la plaza
    muspla NUMBER(1) CHECK (MUSPLA IN (0, 1)), -- Museo de la plaza, actua como bool
    CONSTRAINT PK_PLAZA PRIMARY KEY (nompla),
    CONSTRAINT FK_PLAZA_UBICACIO FOREIGN KEY (ideubi) REFERENCES UBICACION(ideubi)
);
-- TABLA APODERAT
CREATE TABLE APODERAT (
    ideapo VARCHAR2(10), -- Identificador del apoderado (màxim 10 dígits)
    CONSTRAINT PK_APODERAT PRIMARY KEY (IDEAPO)
);

-- TABLA PERSONA
CREATE TABLE PERSONA (
    ideper VARCHAR2(10),            -- Identificador de persona
    ideubi NUMBER NOT NULL,         -- Identificador de ubicación
    nompe VARCHAR2(50) NOT NULL,    -- Nombre de la persona
    co1pe VARCHAR2(50) NOT NULL,    -- Primer apellido de la persona
    co2pe VARCHAR2(50),             -- Segundo apellido de la persona
    maiper VARCHAR2(100),           -- Mail (de la persona
    dirper VARCHAR2(100) NOT NULL,  -- Dirección de la  persona
    CONSTRAINT PK_PERSONA PRIMARY KEY (ideper),
    CONSTRAINT FK_PERSONA_UBICACION FOREIGN KEY (ideubi) REFERENCES UBICA-CION(ideubi)
);

-- TABLA TORERO
CREATE TABLE TORERO (
    idetor VARCHAR2(10),            -- Identificador de torero
    ideapo VARCHAR2(10) NOT NULL,   -- Identificador de apoderado
    CONSTRAINT PK_TORERO PRIMARY KEY (idetor),
    CONSTRAINT FK_TORERO_APODERAT FOREIGN KEY (ideapo) REFERENCES APODERAT(ideapo)
);

-- TABLA ACTUACION
CREATE TABLE ACTUACION (
    ideact NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- Id de actuación
    idetor VARCHAR2(10) NOT NULL,       -- Identificador de torero
    nompla VARCHAR2(50) NOT NULL,       -- Nombre de la plaza
    datcor DATE NOT NULL,               -- Fecha de la actuación
    CONSTRAINT PK_ACTUACION PRIMARY KEY (ideact),
    CONSTRAINT FK_ACTUACION_TORERO FOREIGN KEY (idetor) REFERENCES TORERO(idetor),
    CONSTRAINT FK_ACTUACION_PLAZA FOREIGN KEY (nompla) REFERENCES PLAZA(nompla)
);

-- TABLA TORO
CREATE TABLE TORO (
    idtoro NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- Identificador de to-ro
    cifram CHAR(3) NOT NULL,        -- CIF de la ramadería
    nombou VARCHAR2(50) NOT NULL,   -- Nombre o identificación del toro
    anybou DATE NOT NULL,           -- Año de nacimiento del toro
    pesbou NUMBER(10, 2) NOT NULL,  -- Peso del toro
    CONSTRAINT PK_TORO PRIMARY KEY (idtoro),
    CONSTRAINT FK_TORO_RAMADERIA FOREIGN KEY (cifram) REFERENCES RAMADERIA(cifram)
);

-- TABLA ESDEVENIMENT
CREATE TABLE ESDEVENIMENT (
    ideesd NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY, -- Identificador de evento
    fircor VARCHAR2(50) NOT NULL,   -- Clave forana que referencia a FERIA(fircor)
    nompla VARCHAR2(50) NOT NULL,   -- Clave forana que referencia a PLAZA(nompla)
    datcor DATE NOT NULL,           -- Fecha del esdeveniment
    CONSTRAINT PK_ESDEVENIMENT PRIMARY KEY (ideesd),
    CONSTRAINT FK_ESDEVENIMENT_FERIA FOREIGN KEY (fircor) REFERENCES FERIA(fircor),
    CONSTRAINT FK_ESDEVENIMENT_PLAZA FOREIGN KEY (nompla) REFERENCES PLAZA(nompla)
);

-- TABLA R_ESDEVENIMENT_TORO
CREATE TABLE R_ESDEVENIMENT_TORO (
    idtoro NUMBER NOT NULL, -- id del toro que hace referencia a la tabla TORO
    ideesd NUMBER NOT NULL, -- id del esdeveniment que hace referencia a la tabla ESDEVENIMENT
    CONSTRAINT PK_ESDEVENIMENT_TORO PRIMARY KEY (idtoro, ideesd),
    CONSTRAINT FK_TORO FOREIGN KEY (idtoro) REFERENCES TORO(idtoro),
    CONSTRAINT FK_ESDEVENIMENT FOREIGN KEY (ideesd) REFERENCES ESDEVENIMENT(ideesd)
);


-- ===================================================================================
-- OTORGAR PERMISOS
-- Tabla APODERAT
GRANT INSERT ON APODERAT TO Utest; -- Insertar
GRANT SELECT ON APODERAT TO Utest; -- Consultar
-- Tabla UBICACION
GRANT INSERT ON UBICACION TO Utest; -- Insertar
GRANT SELECT ON UBICACION TO Utest; -- Consultar
-- Tabla RAMADERIA
GRANT INSERT ON RAMADERIA TO Utest; -- Insertar
GRANT SELECT ON RAMADERIA TO Utest;  -- Consultar
-- Tabla FERIA
GRANT INSERT ON FERIA TO Utest; -- Insertar
GRANT SELECT ON FERIA TO Utest; -- Consultar
-- Tabla PERSONA
GRANT INSERT ON PERSONA TO Utest; -- Insertar
GRANT SELECT ON PERSONA TO Utest; -- Consultar
-- Tabla PLAZA
GRANT INSERT ON PLAZA TO Utest; -- Insertar
GRANT SELECT ON PLAZA TO Utest; -- Consultar
-- Tabla TORERO
GRANT INSERT ON TORERO TO Utest; -- Insertar
GRANT SELECT ON TORERO TO Utest; -- Consultar
-- Tabla ACTUACION
GRANT INSERT ON ACTUACION TO Utest; -- Insertar
GRANT SELECT ON ACTUACION TO Utest; -- Consultar
-- Tabla TORO
GRANT INSERT ON TORO TO Utest; -- Insertar
GRANT SELECT ON TORO TO Utest; -- Consultar
-- Tabla ESDEVENIMENT
GRANT INSERT ON ESDEVENIMENT TO Utest; -- Insertar
GRANT SELECT ON ESDEVENIMENT TO Utest; -- Consultar
-- Tabla R_ESDEVENIMENT_TORO
GRANT INSERT ON R_ESDEVENIMENT_TORO TO Utest; -- Insertar
GRANT SELECT ON R_ESDEVENIMENT_TORO TO Utest; -- Consultar

-- ===================================================================================
-- Consulta ejercicio 22
SELECT P.NOMPLA AS "NOMBRE DE LA PLAZA",
    UBI.NOMPAI AS "PAIS",
    UBI.NOMCIU AS "CIUDAD",
    COUNT(ET.IDTORO) AS "NUMERO DE TOREADOS"
FROM PLAZA P
    -- Para poder acceder a nompai y nomciu
    JOIN UBICACION UBI
    ON P.IDEUBI = UBI.IDEUBI
    -- Para poder acceder al id del toro
    JOIN ESDEVENIMENT ESD
    ON ESD.NOMPLA = P.NOMPLA
        JOIN R_ESDEVENIMENT_TORO ET
        ON ET.IDEESD = ESD.IDEESD
-- Agrupación por plazas para que no salgan duplicados
GROUP BY P.NOMPLA, PAIS, CIUDAD;

-- ===================================================================================
-- Plan de ejecución
EXPLAIN PLAN FOR
SELECT P.NOMPLA AS "NOMBRE DE LA PLAZA",
    UBI.NOMPAI AS "PAIS",
    UBI.NOMCIU AS "CIUDAD",
    COUNT(ET.IDTORO) AS "NUMERO DE TOREADOS"
FROM PLAZA P
    JOIN UBICACION UBI
    ON P.IDEUBI = UBI.IDEUBI
    JOIN ESDEVENIMENT ESD
    ON ESD.NOMPLA = P.NOMPLA
        JOIN R_ESDEVENIMENT_TORO ET
        ON ET.IDEESD = ESD.IDEESD
GROUP BY P.NOMPLA, PAIS, CIUDAD;

-- Ver plan de ejecución de forma detallada
SELECT * FROM TABLE(DBMS_XPLAN.DISPLAY (FORMAT=>'ALL +OUTLINE'));